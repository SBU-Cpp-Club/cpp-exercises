#+TITLE: C++ Primer Exercise Notes
#+AUTHOR: Donald Willcox

The C++ Primer, 5th Edition, by Lippman, Lajoie, and Moo is here
denoted ``CPPP5''.

* Tips

** Bash - Show Return Value

To see return values from the last run program or command, use `$?`:

#+BEGIN_EXAMPLE
$ ./exercise-1.1-dw.exe
$ echo $?
0
#+END_EXAMPLE

** Disassembly with objdump

I prefer the following objdump options for disassembling an executable
(e.g. `main.exe`):

#+BEGIN_EXAMPLE
$ objdump -d --no-show-raw-insn -M intel main.exe
#+END_EXAMPLE


* Chapter 1

** Exercise 1.1

main() returns 0

I get the return value 0

Just as expected.

** Exercise 1.2

main() returns -1

I get the return value 255

Lupe suggested this is because of how signed numbers are represented
on 8 bits, cf pg 34 of CPPP5. The program is returning -1 as a signed
integer, in accordance with the declared return value of `main()` but
bash seems to be displaying it as an unsigned integer instead.

This is confirmed by the GNU specifications for [[https://www.gnu.org/software/libc/manual/html_node/Exit-Status.html#Exit-Status][Exit Status codes]] and
[[https://www.gnu.org/software/libc/manual/html_node/Process-Completion-Status.html][Process Completion Status Macros]] which dictate that if the process has
exited, then the exit status macro ``returns the low-order 8 bits of
the exit status value from the child process'' which is interpreted as
an unsigned integer (0-255).

Furthermore, the mapping between the signed integer returned by the
C++ program and the unsigned 8-bit exit status is determined by the
two's complement binary representation of negative numbers used by
most modern computers. In this representation, `x*` is the binary
representation of the negative number with magnitude `x` and is
defined by `x* = 2^N - x` on N bits. Equivalently, the binary
representation of the negative number can be obtained from the binary
representation of its magnitude by flipping its bits and adding one.

So, a C++ integer exit status of -1 is represented on 16 bits by
0xFFFF in two's complement, and the lowest 8 bits are 0xFF, which
interpreted as an unsigned integer yields 2^8 - 1 = 255.

** Exercise 1.3
   
The Hello, World program. It works.

** Exercise 1.4

Print the product of two integers from command line.

It works.

** Exercise 1.5

Use separate statement per operand.

It works.

** Exercise 1.6

The program fragment is not legal because the first `cout` line
terminates in `;` and there are no instances of `cout` on the
following lines, thus the `<<` operators on those lines lack an
`ostream`. Alternately, just get rid of the terminating `;` on the
first two lines of the `cout`.

Fixed.

** Exercise 1.7

Attempting improperly nested comments ...

Got following compiler error.

```
g++ -Wall -pedantic -std=c++11 -o exercise-1.7-dw.ex exercise-1.7-dw.cpp
exercise-1.7-dw.cpp: In function ‘int main()’:
exercise-1.7-dw.cpp:3:34: error: ‘nest’ was not declared in this scope
   /* Begin comment and try to */ nest the comments /* like so. */
                                  ^
GNUmakefile:10: recipe for target 'exercise-1.7-dw.ex' failed
make: *** [exercise-1.7-dw.ex] Error 1
```

** Exercise 1.8

Line 3 does not compile because the first quote is within a comment,
leaving the second quote without a terminating quote character.

All other lines compile because the compiler searches from the opening
`/*` to the next consecutive closing `*/`.

** Exercise 1.9

Sum numbers 50 to 100 with a while.

It worked, though I at first used single quotes to print a
string. That yielded an error, since in C & C++ single quotes denote
multi-character literals that get represented as an integer by the
compiler. You have to use double quotes to denote character string
literals.

** Exercise 1.10

Print numbers from 10 down to 0.

Works.

** Exercise 1.11

Print each integer between two integers.

To make this a little more general I am printing the range a ... b
instead of the numbers in the range [a, b] since I make no assumption
as to which of a or b is larger.

** Exercise 1.12

Sums the integers from -100 to +100, result is 0.

** Exercise 1.13

Rewrite Ex 1.9 (1.13a) and 1.10 (1.13b) using for loops.

** Exercise 1.14

Dissassembly shows Ex 1.9 vs 1.13a and 1.10 vs 1.13b compile to
exactly the same machine instructions.

You can change the order in which x and i are declared in Ex 1.9, for
example, but the only instruction-level difference is to change which
memory addresses the compiler uses for x and i.

** Exercise 1.15

Eh, I'll skip this one. Bla bla compiler errors.

** Exercise 1.16

Print sum of set of integers from stdin.

This was cool. The while loop over `std::cin` stops at EOF, which on
Linux is `Ctrl-D`.

** Exercise 1.17

If the input values are all equal, you just get a count equal to the
number of input values. If they are all different, you get a count for
each one and the counts are all 1.

** Exercise 1.18

Validating Ex 1.17 ... yep, it does what I said it would.

** Exercise 1.19

I already did that, see Ex 1.11. My 1.19 is just a copy.

** Exercise 1.20

ezpz

** Exercise 1.21

ezpz

** Exercise 1.22

ezpz

** Exercise 1.23

ezpz

** Exercise 1.24

Works as expected.

** Exercise 1.25

Works as expected.


